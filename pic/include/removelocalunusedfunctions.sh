#!/bin/bash
#arguments 
# $1 - file to process

#configuration
ASMCOMMENT=";;" # variable that will be used for commenting out unused code
REMOCE_UNUSED_CODE='y' # when set unused code will be removed, when not set, unused code will be commented out

# parameters 
file=$1

filename=$(basename "$file")

# ----------- remove unused functions ---------------- 

get_unused_functions() 
{
	# gets unused functions
	# parameters
	# $1 - file assembler generated by sdcc
	# output to stdout - list of unused functions in file

	# strip out comments, makes processing hell faster
	local beer=$( cat $1 | sed -re '/^;/d ; s/;.*$//' ) 
	local TAB=$( echo -ne "\t" )	

	# load all function in file
	# function name by sdcc looks like: S_${filename__${function_name} code
	local symbols=( $( echo "$beer" | grep -e "^S_" -e "code" | sed -e "s/S_${filename}__/  /" -e "s/${TAB}code/  /" | tr '\n' ' ' ) ) 
	# get global exported functions - placed at the beggining of the file with global keyword
	local global=$( echo "$beer" | grep -i '^'"$TAB"'global' | sed "s/${TAB}[Gg][Ll][Oo][Bb][Aa][Ll]${TAB}_//" | tr '\n' ' ') 
	# get called functions, we dont want to remove them
	local calls=$( echo "$beer" | grep -i '^'"$TAB"'call' | sed "s/${TAB}[Cc][Aa][Ll][Ll]${TAB}_//" )
	# remove called functions and global exported functions from functions list
	for i in $global $calls ; do 
		symbols=( $( echo " ${symbols[@]} " | sed "s/ ${i} / /" ) ) # remove ${i} from $symbols array
	done

	# output our list
	echo ${symbols[@]}
}



remove_functions_from_asm ()
{
	# parameters:
	# $1 - asm file generated by sdcc
	# $2 - output file
	# shift; $@ - function names to be removed from $1 file
	local line= func= 
	local i=0 
	local file=$1
	local output=$2
	shift
	shift
	exec 7<$file
	IFS=
	while read -r line <&7; do 
		for func in $@; do
			# check if the line is the once contaiing function declaration 
			if [[ "$line" = "S_"*"__$func"*"code"* ]]; then
				echo "Removing unused function $func."
				test -n "$REMOVE_UNUSED_CODE" || echo "$ASMCOMMENT UNUSED FUNCTION commented out" >> $output
				test -n "$REMOVE_UNUSED_CODE" || echo "$ASMCOMMENT""$line" >> $output
				# echo anything with a ";" at the begining
				# until breakpoints
				while read -r line <&7; do
					if [[ "$line" = *"Starting pCode block"* || $line = *"Statistics:"* || $line = *"CONFIG"* || $line = *"code"* ]]; then
						break;
					fi 
					if [[ "$line" = "RETURN" ]]; then
						read -r line <&7 # remove RETURN too 
						test -n "$REMOVE_UNUSED_CODE" || echo "$ASMCOMMENT""$line" >> $output
						break;
					fi
					test -n "$REMOVE_UNUSED_CODE" || echo "$ASMCOMMENT""$line" >> $output
				done
			fi
		done
		echo "$line" >> $output
	done
}


rmf=$( get_unused_functions $file )
temp=$(mktemp)
remove_functions_from_asm "$file" "$temp" $rmf
cp $temp $file
rm $temp

