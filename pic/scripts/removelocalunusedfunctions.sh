#!/bin/bash -eu
#arguments 
# $1 - file to process

#configuration
ASMCOMMENT=";unused;" # variable that will be used for commenting out unused code
REMOVE_UNUSED_CODE=true # when set unused code will be removed, when not set, unused code will be commented out
DEBUG=false

# parameters 
file="${1}"
filename=$(basename "$file")

# ----------- remove unused functions ---------------- 

get_unused_functions() 
{
	# gets unused functions
	# parameters
	# $1 - file assembler generated by sdcc
	# output to stdout - list of unused functions in file

	local symbols globals calls beer
	
	# strip out comments, makes processing hell faster
	beer=$( cat $1 | sed -re '/^;/d ; s/;.*$//' ) 

	# load all function in file
	
	# function name by sdcc looks like: S_${filename}__${function_name} code
	symbols="$( echo "$beer" | grep  -P '^[ \t]*S_.*__.*\t[ \t]*code$' | sed -e 's/^[ \t]*S_[^_]*__\(_*.*\)[ \t].*$/ \1 /' | tr '\n' ' ' )"
	
	# get global exported functions - placed at the beggining of the file with global keyword
	globals="$( echo "$beer" | grep -P '^[\t ]*[Gg][Ll][Oo][Bb][Aa][Ll]' | sed 's/^[\t ]*[Gg][Ll][Oo][Bb][Aa][Ll][\t ]*_/  /' | tr '\n' ' ' )"
	
	# get called functions, we dont want to remove them
	calls="$( echo "$beer" | grep -P '^[\t ]*([rR]|[lL])?[Cc][Aa][Ll][Ll]' | sed 's/^[\t ]*\([rR]|[lL]\)\?[Cc][Aa][Ll][Ll][\t ]*_/  /' | tr '\n' ' ' )"
	
	$DEBUG && echo symbols=$symbols globals=$globals calls=$calls >&2
	
	# remove called functions and global exported functions from functions list
	for i in ${globals} ${calls}; do 
		$DEBUG && echo "remove ${i} from ${symbols}" >&2
		symbols="$( echo " ${symbols} " | sed -e "s/ ${i} / /" )"
	done
	
	# output our list
	echo "${symbols}"
}

remove_functions_from_asm ()
{
	# parameters:
	# $1 - asm file generated by sdcc
	# $2 - output file
	# shift; $@ - function names to be removed from $1 file
	local line= func= 
	local i=0 
	local file=$1
	local output=$2
	shift 2
	while IFS= read -r line; do 
		for func in $@; do
			# check if the line is the once contaiing function declaration 
			if [[ "$line" =~ ^S_.*__"${func}".*code ]]; then
				echo "Removing unused function '$func'"
				# echo anything with a "$ASMCOMMENT" at the begining
				
				$REMOVE_UNUSED_CODE && echo "$ASMCOMMENT UNUSED FUNCTION '$func' commented out" >> $output
				$REMOVE_UNUSED_CODE && echo "$ASMCOMMENT""$line" >> $output
				# until breakpoints
				while IFS= read -r line; do
					if [[   "$line" =~ ^([\t \;]*)'Starting pCode block' || 
							"$line" =~ ^([\t \;]*)'Statistics:' ||  
							"$line" =~ ^([\t \]*)[cC][oO][nN][fF][iI][gG] || 
							"$line" =~ ^([ \t]*)S_.*__.*([ \t]*)code ]]; then
						break;
					fi 
					if [[ "$line" =~ ^([\t ]*[Rr][eE][tT][uU][rR][nN]) ]]; then
						IFS= read -r line # remove RETURN too 
						$REMOVE_UNUSED_CODE && echo "$ASMCOMMENT""$line" >> $output
						break;
					fi
					$REMOVE_UNUSED_CODE && echo "$ASMCOMMENT""$line" >> $output
				done
			fi
		done
		echo "$line" >> $output
	done < "$file"
}

rmf="$( get_unused_functions $file )"
$DEBUG && echo rmf="$rmf"
temp=$(mktemp)
remove_functions_from_asm "$file" "$temp" "$rmf"
cp $temp $file
rm $temp

